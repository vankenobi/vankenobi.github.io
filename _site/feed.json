{
    "version": "https://jsonfeed.org/version/1",
    "title": "Vankenobi",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "Writting",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2020/06/07/esp32-i%CC%87le-asenkron-olarak-%C3%A7al%C4%B1%C5%9Fan-web-server-projesi",
            "title": "Esp32 İle Asenkron Olarak Çalışan Web Server Projesi",
            "summary": null,
            "content_text": "Esp32 Kartının KurulumuBilgisayarınızda halihazırda kurulu bir Arduino IDE’si olduğunu varsayıyorum. Ancak projede kullanacağımız ESP32, IDE’nin standart kurulumunda gelmiyor o yüzden bazı ek işlemler yapmamız gerekecek.Arduino IDE’sini açıpDosya&gt;Tercihler menüsünden Ek Devre Kartları Yöneticisi URL’leri kısmına aşağıdaki adresi ekleyelim:https://dl.espressif.com/dl/package_esp32_index.jsonDaha sonra Araçlar&gt;Kart&gt;Kart Yöneticisi kısmından Esp32 kartını bulup kuralım.Projeye GirişProjeye başlamadan önce senkron, asenkron gibi kavramları websocket’in ne olduğundan bahsetmek istiyorum.  Senkron Nedir ?Kelime anlamı eşzamanlı olan senkron kelimesi yazılımda birtakım işlemlerin sıra ile yapılmasıdır.Basit bir analoji yapmak gerekirse bir fatura ödeme merkezindesiniz ve faturanızı ödemek için kuyruğa girdiniz. Sizin önünüzde fatura ödemek isteyen kişilerin faturaları ödenmeden sizin faturanız ödenmez. İşte bu şekilde işlemleri sıralı bir şekilde yapılmasına senkron programlama denir.   Asenkron Nedir ?  Kelime anlamı “Aynı zamanda veya birlikte meydana gelmeyen” olan asenkron kelimesi yazılımda yürütülen işlemlerin uzun sürmesinden dolayı yürütülmesi gereken diğer işlemlerin beklemeden çalışmasına devam edebilmesini sağlar. Senkronu açıklarken yaptığım gibi basit bir analoji yapmam gerekirse mutfakta iki çeşit yemek pişiriyorsunuz ve birini yapmaya başladınız. Elinizdeki yemek kaynarken diğer yemeğe başlamak için elinizdeki yemeğin bitmesini beklemezsiniz. İşte bu duruma asenkron programlama denir.   Websocket Nedir ?  WebSocket, tek bir TCP bağlantısı üzerinden tam çift yönlü iletişim kanalı sağlayan bir bilgisayar iletişim protokolüdür. WebSocket protokolü, sunucuya ve sunucudan gerçek zamanlı veri aktarımını sağlayarak, tarayıcı ile web sunucusu arasında etkileşimi sağlamaktadır. Bu, sunucunun istemci istemeden tarayıcıya içerik gönderebileceği ve bağlantıyı açık tutarak istediği zaman mesaj alabilmesini veya gönderebilmesini sağlayan standart bir yöntem ile sağlanmaktadır.Bizim bu projemizde ise web sayfası yenilenmeden kart üzerindeki ledi açıp kapatabilmemizi sağlanıyor. Neden Websocket ? Yeni bir istek HTTP protokolündeki kuralların tekrar edilmesine ve fazla trafik kullanımına neden olur.Trafik kullanımı ve HTTP protokolüyle gerçek zamanlı uygulamaların yönetilmesi maliyetli ve zor olduğundan dolayı websocket kullanılır.Proje içerisinde kullanacağımız kütüphaneler Esp32 kartımızın ağa bağlanmasını ve üzerinde bir web sayfasını asenkron çalıştırmasını sağlayacak.#include &lt;WiFi.h&gt;  #include &lt;AsyncTCP.h&gt;  #include &lt;ESPAsyncWebServer.h&gt;Proje içerisinde kullanılan kütüphanelerin linkleri:   AsyncTCP.h   ESPAsyncWebServer.h   Wifi.h kütüphanesi Arduino IDE’si içerisinde halihazırda mevcut. const char* ssid = &quot;Ag Adi&quot;;    const char* password = &quot;Ag Parolasi&quot;;    const int led = 2;Ssid ve password kısmına bulunduğunuz ortamdaki ağın adını ve parolasını giriniz. Esp32 üzerindeki led  GPIO2 pinine bağlı olduğu için led isminde değişkeni bu pine atadık.const char index_html[] PROGMEM =Progmem anahtar sözcüğü normalde Esp32’nin Sram’ine kaydetmesi gerekirken Flash hafızasına kaydetmesini sağlar. Esp32’nin Flash hafızası 4MB’dır.void notFound(AsyncWebServerRequest *request) {    request-&gt;send(404, &quot;text/plain&quot;, &quot;Sayfa Bulunamdadi&quot;);}NotFound fonksiyonu sayfa bulunamadığında 404 hata kodunu ve sayfa bulunamadı mesajını gönderecek.AsyncWebServer server(80);AsyncWebServer sınıfından server adlı bir nesne oluşturduk ve parametre olarak 80 verdik. Girilen parametre portu temsil ediyor.Serial.begin(115200);  WiFi.mode(WIFI_STA);  WiFi.begin(ssid, password);  if (WiFi.waitForConnectResult() != WL_CONNECTED) {    Serial.println(&quot;Wifi agina Baglanmadi!&quot;);    return;  }  Serial.println();  Serial.print(&quot;ESP IP Address: http://&quot;);  Serial.println(WiFi.localIP());Bu kod bloğunda sırasıyla;  Seri haberleşmeyi başlattık ve baudrate hızını 115200 olarak ayarladık.  Wifi modunu STA olarak ayarladık. STA İstasyon modudur. Esp32’yi erişim noktası tarafından kurulan bir WiFi ağına bağlamak için kullanılır.  Begin metodu ile parametresi girilen wifi ağına bağlanır.  İf bloğu wifi ağına bağlanıp bağlanmadığını kontrol ediyor. Ağa bağlanmadıysa seri monitöre “Wifi agina Baglanmadi!” yazdırır. Eğer bağlandıysa esp32’nin sunmuş olduğu web sayfasının linkini seri monitöre yazdırır.pinMode(led, OUTPUT);  digitalWrite(led, LOW);Led adlı değişkenin bulunduğu pine(GPIO2) çıkış verdik ve başlangıçtaki durumunu kapalı olarak belirledik.server.on(&quot;/&quot;, HTTP_GET, [](AsyncWebServerRequest *request){    request-&gt;send_P(200, &quot;text/html&quot;, index_html);  });Gelen isteğe karşılık web sayfasını istemciye gönderir.server.on(&quot;/ac&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, HIGH);    request-&gt;send(200, &quot;text/plain&quot;, &quot;ac sinyali gonderildi.&quot;);  });Gelen “/ac” isteğine karşılık ledi açık konuma getirir ve istemciye “ac sinyali gonderildi.” mesajını iletir.server.on(&quot;/kapat&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, LOW);    request-&gt;send(200, &quot;text/plain&quot;, &quot;kapat sinyali gönderildi.&quot;);  });Gelen “/kapat” isteğine karşılık ledi kapalı konuma getirir ve istemciye “kapat sinyali gonderildi.” mesajını iletir.server.onNotFound(notFound);server.begin();Bu kod bloğunda sırasıyla:  Eğer sayfa bulunamadıysa onNotFound metodu çalıştırılacak.  begin metodu web serverı başlatır.#include &lt;WiFi.h&gt;#include &lt;AsyncTCP.h&gt;#include &lt;ESPAsyncWebServer.h&gt;const char* ssid = &quot;Ag Adi&quot;;const char* password = &quot;Ag Parolasi&quot;;const int led = 2;const char index_html[] PROGMEM = R&quot;rawliteral(&lt;!DOCTYPE Html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt; Web Sayfasi &lt;/title&gt;    &lt;style&gt;        body {            margin: 0;            text-align: center;        }                button {            width: 200px;            height: 100px;            border-radius: 3px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h2&gt;Esp32 İle Asenkron Web Server&lt;/h2&gt;    &lt;br&gt;    &lt;button style=&quot;background-color: #77d772;&quot; id=&quot;ac&quot; onclick=&quot;myfunction(&#39;ac&#39;)&quot;&gt;&lt;b&gt;Aç&lt;/b&gt;&lt;/button&gt;    &lt;button style=&quot;background-color: red;&quot; id=&quot;kapat&quot; onclick=&quot;myfunction(&#39;kapat&#39;)&quot;&gt;&lt;b&gt;Kapat&lt;/b&gt;&lt;/button&gt;    &lt;h4&gt;Led Durum:        &lt;h4 id=&quot;leddurum&quot;&gt;Led Kapalı&lt;/h4&gt;    &lt;/h4&gt;    &lt;script&gt;        function myfunction(value) {            var xhr = new XMLHttpRequest();            if (value == &#39;ac&#39;) {                document.getElementById(&quot;leddurum&quot;).innerHTML = &quot;Led Açık&quot;;                xhr.open(&quot;GET&quot;, &quot;/ac&quot;, true);                xhr.send();            } else {                document.getElementById(&quot;leddurum&quot;).innerHTML = &quot;Led Kapalı&quot;;                xhr.open(&quot;GET&quot;, &quot;/kapat&quot;, true);                xhr.send();            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/Html&gt;)rawliteral&quot;;void notFound(AsyncWebServerRequest *request) {  request-&gt;send(404, &quot;text/plain&quot;, &quot;Sayfa Bulunamdadi&quot;);}AsyncWebServer server(80);void setup() {  Serial.begin(115200);  WiFi.mode(WIFI_STA);  WiFi.begin(ssid, password);  if (WiFi.waitForConnectResult() != WL_CONNECTED) {    Serial.println(&quot;Wifi agina Baglanmadi!&quot;);    return;  }  Serial.println();  Serial.print(&quot;ESP IP Address: http://&quot;);  Serial.println(WiFi.localIP());    pinMode(led, OUTPUT);  digitalWrite(led, LOW);    server.on(&quot;/&quot;, HTTP_GET, [](AsyncWebServerRequest *request){    request-&gt;send_P(200, &quot;text/html&quot;, index_html);  });    server.on(&quot;/ac&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, HIGH);    request-&gt;send(200, &quot;text/plain&quot;, &quot;ac sinyali gonderildi.&quot;);  });    server.on(&quot;/kapat&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, LOW);    request-&gt;send(200, &quot;text/plain&quot;, &quot;kapat sinyali gönderildi.&quot;);  });    server.onNotFound(notFound);  server.begin();}void loop() { }",
            "content_html": "<p><img src=\"https://drive.google.com/uc?export=view&amp;id=1RBA39QFpLErzHYOGzV23YcPVw0rxgIsN\" alt=\"AsenkronServer\" /></p><h2 id=\"esp32-kartının-kurulumu\">Esp32 Kartının Kurulumu</h2><p>Bilgisayarınızda halihazırda kurulu bir Arduino IDE’si olduğunu varsayıyorum. Ancak projede kullanacağımız ESP32, IDE’nin standart kurulumunda gelmiyor o yüzden bazı ek işlemler yapmamız gerekecek.</p><p>Arduino IDE’sini açıp<b>Dosya&gt;Tercihler</b> menüsünden <b>Ek Devre Kartları Yöneticisi URL’leri</b> kısmına aşağıdaki adresi ekleyelim:<b>https://dl.espressif.com/dl/package_esp32_index.json</b></p><p>Daha sonra <b>Araçlar&gt;Kart&gt;Kart Yöneticisi</b> kısmından Esp32 kartını bulup kuralım.</p><p><img src=\"https://drive.google.com/uc?id=1_UJ_4ufjx3jU0qw4xVHieJplmRmiBgTe\" alt=\"Kart Yöneticisi Penceresi\" /></p><p><br /></p><h2 id=\"projeye-giriş\">Projeye Giriş</h2><p><img src=\"https://drive.google.com/uc?id=1UtJH7mTVt5Axql39misBsLFdw_CotiET\" alt=\"Asenkron Server\" /></p><p>Projeye başlamadan önce senkron, asenkron gibi kavramları websocket’in ne olduğundan bahsetmek istiyorum.</p><blockquote>  <p><span style=\"background-color:#c0c0c0; padding:5px;border-radius:5px\">Senkron Nedir ?</span><br />Kelime anlamı <strong>eşzamanlı</strong> olan senkron kelimesi yazılımda birtakım işlemlerin sıra ile yapılmasıdır.Basit bir analoji yapmak gerekirse bir fatura ödeme merkezindesiniz ve faturanızı ödemek için kuyruğa girdiniz. Sizin önünüzde fatura ödemek isteyen kişilerin faturaları ödenmeden sizin faturanız ödenmez. İşte bu şekilde işlemleri sıralı bir şekilde yapılmasına senkron programlama denir.</p></blockquote><blockquote>  <p><span style=\"background-color:#c0c0c0; padding:5px;border-radius:5px\"> Asenkron Nedir ? </span> <br />Kelime anlamı “Aynı zamanda veya birlikte meydana gelmeyen” olan asenkron kelimesi yazılımda yürütülen işlemlerin uzun sürmesinden dolayı yürütülmesi gereken diğer işlemlerin beklemeden çalışmasına devam edebilmesini sağlar. Senkronu açıklarken yaptığım gibi basit bir analoji yapmam gerekirse mutfakta iki çeşit yemek pişiriyorsunuz ve birini yapmaya başladınız. Elinizdeki yemek kaynarken diğer yemeğe başlamak için elinizdeki yemeğin bitmesini beklemezsiniz. İşte bu duruma asenkron programlama denir.</p></blockquote><blockquote>  <p><span style=\"background-color:#c0c0c0; padding:5px;border-radius:5px\"> Websocket Nedir ? </span> <br />WebSocket, tek bir TCP bağlantısı üzerinden tam çift yönlü iletişim kanalı sağlayan bir bilgisayar iletişim protokolüdür. WebSocket protokolü, sunucuya ve sunucudan gerçek zamanlı veri aktarımını sağlayarak, tarayıcı ile web sunucusu arasında etkileşimi sağlamaktadır. Bu, sunucunun istemci istemeden tarayıcıya içerik gönderebileceği ve bağlantıyı açık tutarak istediği zaman mesaj alabilmesini veya gönderebilmesini sağlayan standart bir yöntem ile sağlanmaktadır.Bizim bu projemizde ise web sayfası yenilenmeden kart üzerindeki ledi açıp kapatabilmemizi sağlanıyor.<br /><span style=\"background-color:#c0c0c0; padding:5px;border-radius:5px\"> Neden Websocket ? </span><br />Yeni bir istek HTTP protokolündeki kuralların tekrar edilmesine ve fazla trafik kullanımına neden olur.Trafik kullanımı ve HTTP protokolüyle gerçek zamanlı uygulamaların yönetilmesi maliyetli ve zor olduğundan dolayı websocket kullanılır.</p></blockquote><p><br /></p><p>Proje içerisinde kullanacağımız kütüphaneler Esp32 kartımızın ağa bağlanmasını ve üzerinde bir web sayfasını asenkron çalıştırmasını sağlayacak.</p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">#include &lt;WiFi.h&gt;  #include &lt;AsyncTCP.h&gt;  #include &lt;ESPAsyncWebServer.h&gt;</code></pre></figure><p>Proje içerisinde kullanılan kütüphanelerin linkleri:</p><ul>  <li><span style=\"font-size:18px\"> <a href=\"https://github.com/me-no-dev/AsyncTCP\">AsyncTCP.h</a></span></li>  <li><span style=\"font-size:18px\"> <a href=\"https://github.com/me-no-dev/ESPAsyncWebServer/\">ESPAsyncWebServer.h</a></span></li>  <li><span style=\"font-size:18px\"> Wifi.h kütüphanesi Arduino IDE’si içerisinde halihazırda mevcut. </span></li></ul><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">const char* ssid = &quot;Ag Adi&quot;;    const char* password = &quot;Ag Parolasi&quot;;    const int led = 2;</code></pre></figure><p>Ssid ve password kısmına bulunduğunuz ortamdaki ağın adını ve parolasını giriniz. Esp32 üzerindeki led  GPIO2 pinine bağlı olduğu için led isminde değişkeni bu pine atadık.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">const char index_html[] PROGMEM =</code></pre></figure><p>Progmem anahtar sözcüğü normalde Esp32’nin Sram’ine kaydetmesi gerekirken Flash hafızasına kaydetmesini sağlar. Esp32’nin Flash hafızası 4MB’dır.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">void notFound(AsyncWebServerRequest *request) {    request-&gt;send(404, &quot;text/plain&quot;, &quot;Sayfa Bulunamdadi&quot;);}</code></pre></figure><p>NotFound fonksiyonu sayfa bulunamadığında 404 hata kodunu ve sayfa bulunamadı mesajını gönderecek.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">AsyncWebServer server(80);</code></pre></figure><p>AsyncWebServer sınıfından server adlı bir nesne oluşturduk ve parametre olarak 80 verdik. Girilen parametre portu temsil ediyor.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">Serial.begin(115200);  WiFi.mode(WIFI_STA);  WiFi.begin(ssid, password);  if (WiFi.waitForConnectResult() != WL_CONNECTED) {    Serial.println(&quot;Wifi agina Baglanmadi!&quot;);    return;  }  Serial.println();  Serial.print(&quot;ESP IP Address: http://&quot;);  Serial.println(WiFi.localIP());</code></pre></figure><p>Bu kod bloğunda sırasıyla;</p><ul>  <li><span style=\"font-size:18px\">Seri haberleşmeyi başlattık ve baudrate hızını 115200 olarak ayarladık.</span></li>  <li><span style=\"font-size:18px\">Wifi modunu STA olarak ayarladık. STA İstasyon modudur. Esp32’yi erişim noktası tarafından kurulan bir WiFi ağına bağlamak için kullanılır.</span></li>  <li><span style=\"font-size:18px\">Begin metodu ile parametresi girilen wifi ağına bağlanır.</span></li>  <li><span style=\"font-size:18px\">İf bloğu wifi ağına bağlanıp bağlanmadığını kontrol ediyor. Ağa bağlanmadıysa seri monitöre “Wifi agina Baglanmadi!” yazdırır. Eğer bağlandıysa esp32’nin sunmuş olduğu web sayfasının linkini seri monitöre yazdırır.</span></li></ul><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">pinMode(led, OUTPUT);  digitalWrite(led, LOW);</code></pre></figure><p>Led adlı değişkenin bulunduğu pine(GPIO2) çıkış verdik ve başlangıçtaki durumunu kapalı olarak belirledik.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">server.on(&quot;/&quot;, HTTP_GET, [](AsyncWebServerRequest *request){    request-&gt;send_P(200, &quot;text/html&quot;, index_html);  });</code></pre></figure><p>Gelen isteğe karşılık web sayfasını istemciye gönderir.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">server.on(&quot;/ac&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, HIGH);    request-&gt;send(200, &quot;text/plain&quot;, &quot;ac sinyali gonderildi.&quot;);  });</code></pre></figure><p>Gelen “/ac” isteğine karşılık ledi açık konuma getirir ve istemciye “ac sinyali gonderildi.” mesajını iletir.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">server.on(&quot;/kapat&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, LOW);    request-&gt;send(200, &quot;text/plain&quot;, &quot;kapat sinyali gönderildi.&quot;);  });</code></pre></figure><p>Gelen “/kapat” isteğine karşılık ledi kapalı konuma getirir ve istemciye “kapat sinyali gonderildi.” mesajını iletir.</p><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">server.onNotFound(notFound);server.begin();</code></pre></figure><p>Bu kod bloğunda sırasıyla:</p><ul>  <li><span style=\"font-size:18px\">Eğer sayfa bulunamadıysa onNotFound metodu çalıştırılacak.</span></li>  <li><span style=\"font-size:18px\">begin metodu web serverı başlatır.</span></li></ul><p><br /></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">#include &lt;WiFi.h&gt;#include &lt;AsyncTCP.h&gt;#include &lt;ESPAsyncWebServer.h&gt;const char* ssid = &quot;Ag Adi&quot;;const char* password = &quot;Ag Parolasi&quot;;const int led = 2;const char index_html[] PROGMEM = R&quot;rawliteral(&lt;!DOCTYPE Html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt; Web Sayfasi &lt;/title&gt;    &lt;style&gt;        body {            margin: 0;            text-align: center;        }                button {            width: 200px;            height: 100px;            border-radius: 3px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;h2&gt;Esp32 İle Asenkron Web Server&lt;/h2&gt;    &lt;br&gt;    &lt;button style=&quot;background-color: #77d772;&quot; id=&quot;ac&quot; onclick=&quot;myfunction(&#39;ac&#39;)&quot;&gt;&lt;b&gt;Aç&lt;/b&gt;&lt;/button&gt;    &lt;button style=&quot;background-color: red;&quot; id=&quot;kapat&quot; onclick=&quot;myfunction(&#39;kapat&#39;)&quot;&gt;&lt;b&gt;Kapat&lt;/b&gt;&lt;/button&gt;    &lt;h4&gt;Led Durum:        &lt;h4 id=&quot;leddurum&quot;&gt;Led Kapalı&lt;/h4&gt;    &lt;/h4&gt;    &lt;script&gt;        function myfunction(value) {            var xhr = new XMLHttpRequest();            if (value == &#39;ac&#39;) {                document.getElementById(&quot;leddurum&quot;).innerHTML = &quot;Led Açık&quot;;                xhr.open(&quot;GET&quot;, &quot;/ac&quot;, true);                xhr.send();            } else {                document.getElementById(&quot;leddurum&quot;).innerHTML = &quot;Led Kapalı&quot;;                xhr.open(&quot;GET&quot;, &quot;/kapat&quot;, true);                xhr.send();            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/Html&gt;)rawliteral&quot;;void notFound(AsyncWebServerRequest *request) {  request-&gt;send(404, &quot;text/plain&quot;, &quot;Sayfa Bulunamdadi&quot;);}AsyncWebServer server(80);void setup() {  Serial.begin(115200);  WiFi.mode(WIFI_STA);  WiFi.begin(ssid, password);  if (WiFi.waitForConnectResult() != WL_CONNECTED) {    Serial.println(&quot;Wifi agina Baglanmadi!&quot;);    return;  }  Serial.println();  Serial.print(&quot;ESP IP Address: http://&quot;);  Serial.println(WiFi.localIP());    pinMode(led, OUTPUT);  digitalWrite(led, LOW);    server.on(&quot;/&quot;, HTTP_GET, [](AsyncWebServerRequest *request){    request-&gt;send_P(200, &quot;text/html&quot;, index_html);  });    server.on(&quot;/ac&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, HIGH);    request-&gt;send(200, &quot;text/plain&quot;, &quot;ac sinyali gonderildi.&quot;);  });    server.on(&quot;/kapat&quot;, HTTP_GET, [] (AsyncWebServerRequest *request) {    digitalWrite(output, LOW);    request-&gt;send(200, &quot;text/plain&quot;, &quot;kapat sinyali gönderildi.&quot;);  });    server.onNotFound(notFound);  server.begin();}void loop() { }</code></pre></figure>",
            "url": "http://localhost:4000/2020/06/07/esp32-i%CC%87le-asenkron-olarak-%C3%A7al%C4%B1%C5%9Fan-web-server-projesi",
            
            
            
            "tags": ["Esp32","Asenkron","Web Server"],
            
            "date_published": "2020-06-07T19:15:00+03:00",
            "date_modified": "2020-06-07T19:15:00+03:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/05/19/nodemcu-esp8266-ve-nokia-5110-i%CC%87le-covid19-m%C3%B6nit%C3%B6r%C3%BC-yap%C4%B1m%C4%B1",
            "title": "NodeMCU Ve Nokia 5110 Ekranı İle Covid-19 Monitörü Projesi",
            "summary": null,
            "content_text": "Bu projede 1.6” Nokia 5110 ekranı ile nodeMCU kartını kullanarak anlık ülkemizdeki corona virüs istatiklerini gösterebileceğimiz bir monitör yaptım. Anlık olarak ekran üzerinde; toplam vaka sayısı, vefat eden kişi ve iyileşen hasta sayılarını vermektedir.  Projeye başlamadan önce proje içerisinde veri transferi yapmamıza yarayacak ThingSpeak sitesinden biraz bahsetmek istiyorum. ThingSpeak ücretsiz olarak hem arduino sensörleri ile okuduğunuz değerleri yazmaya, hem de yazdığınız değerleri telefonunuzda, bilgisayarınızda veya diğer akıllı cihazlarınızda anlık görebilmenize ve okuyabilmenize imkan tanıyan bir platform. API için kanal oluşturuyorsunuz ve sadece sizin bildiğiniz şifreler ile (API key) verilerinizi grafik üzerinde takip edebiliyorsunuz.Sadece veri gönderip okumaktan farklı olarak internetteki bir veriyi API ile IOT cihazlarınıza gönderebilirsiniz. Bizim bu projede yaptığımız da tam olarak bu.Malzeme Listesi  NodeMCU(ESP8266) Kartı  Nokia 5110 ekranıCOVID-19 Verilerini Çekme  Worldometer sitesinden COVID-19 verisini çekeceğimiz ülkenin sayfasına gitmemiz gerekiyor. Bunun için Worldometer sitesine gidiyoruz.  Siteye girdikten sonra sitenin alt kısmında bulunan tabloda verisini çekmek istediğimiz ülkenin linkine tıklyoruz.  Karşımıza gelen sayfada klavyenizden “F12” tuşuna basarak veya mouse’nuzla sağ tık atıp inceleye basarak sayfa kaynağının görüntülendiği ekranı açıyoruz.  Bu kısımda mavi alan içerisinde gösterilen kısma geliyoruz ve mouse ile sağ tık atıp /Copy/Copy XPath seçeneğine tıklıyoruz. Bu kopyalanan veriyi ThinkSpeak ekranında kullanacağız.ThingSpeak Ayarları  Projenin başında bahsettiğim gibi projemizde veri transferini sağlayacak olan ThingSpeak sitesine kayıt olmamız gerekiyor. Eğer kayıt olduysanız site anasayfasında üstte bulunan Apps butonuna gelin ve altta çıkan seçeneklerden ThingHTTP’ye tıklayın.  ThingHTTP’ye tıkladıktan sonra karşımıza çıkan sayfada NewThingHTTP butonuna basıyoruz.  Karşımıza gelen ekranda Name yazan kısma istediğinizi yazabilirsiniz. Ben Türkiye’deki COVID-19 verilerini çekmek istediğim için “Turkey” yazdım. Parse String kısmına kopyaladığımız XPath’i yapıştırıyoruz ve “Save ThingHTTP” butonuna basıyoruz.  Kırmızı dikdörtgen ile işaretlenmiş alan içerisindeki API’yı kopyalıyoruz.  Kopyaladığımız API’yı yukarıdaki fotoğraftaki kırmızı alan içerisindeki api_key kısmına yapıştırıyoruz. Bu arada ağ adı ve ağ parolası yazan kısma bulunduğunuz ortamdaki wifi ağının adını ve parolasını girmeyi unutmayınız.Proje Kaynak Kodu#include &lt;graphicsLCD.h&gt;#include &lt;ESP8266WiFi.h&gt;                                                  #include &lt;ESP8266HTTPClient.h&gt;                                                                       const char* ssid = &quot;AğAdı&quot;;                                        const char* password =  &quot;AğParolası&quot;; const char* host = &quot;api.thingspeak.com&quot;;                                     const int httpPortRead = 80;                                           #define lcd_RST_pin D8#define lcd_CS_pin D7#define lcd_DIN_pin D5#define lcd_CLK_pin D4graphicsLCD lcd(lcd_RST_pin,lcd_CS_pin,lcd_DIN_pin,lcd_CLK_pin);const char* url1 = &quot;/apps/thinghttp/send_request?api_key=Api key yapıştıracağınız kısım&quot;; String toplam_vaka,vefat_eden,iyilesen,Data_Raw,Data_Raw_1,Data_Raw_2,Data_Raw_3;  int indx;WiFiClient client;                                                        HTTPClient http; String _parse(String value){  String kelime ;  for(int i=0; i &lt; value.length();i++)  {    if(value.substring(i,i+1) != &quot;,&quot;)      kelime += value.substring(i,i+1);    }  return kelime;}void setup() {  Serial.begin(9600);  lcd.begin();    lcd.clear();                                                           WiFi.disconnect();                                                  delay(1000);                                                             WiFi.begin(ssid, password);                                                 Serial.println(&quot;Wifi agina baglandı.&quot;);                                         Serial.println(WiFi.localIP());}   void loop()                                                                      {    if( http.begin(host,httpPortRead,url1))                                                    {        int httpCode = http.GET();                                                                          if (httpCode &gt; 0)                                                                      {          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY)             {                 lcd.line(1);              lcd.column(36);              lcd.print(&quot;Turkey&quot;);              Data_Raw = http.getString();                              Data_Raw_1 = Data_Raw;                                                indx = Data_Raw_1.indexOf(&quot;&gt;&quot;);                                                                    Data_Raw_1.remove(0,indx+1);                                      indx = Data_Raw_1.indexOf(&quot;&lt;&quot;);                                                                   Data_Raw_1.remove(indx,Data_Raw_1.length());                                      toplam_vaka=Data_Raw_1;              toplam_vaka = _parse(toplam_vaka);               lcd.line(4);              lcd.print(&quot;Toplam vaka: &quot;);              lcd.print(toplam_vaka.toInt());               lcd.print(&quot;k&quot;);              Data_Raw_2=Data_Raw;              indx = Data_Raw_2.indexOf(&quot;&lt;span&gt;&quot;);              Data_Raw_2.remove(0,indx+6);              Data_Raw_3=Data_Raw_2;              indx = Data_Raw_2.indexOf(&quot;&lt;/span&gt;&quot;);              Data_Raw_2.remove(indx,Data_Raw_2.length());              vefat_eden=Data_Raw_2;              vefat_eden = _parse(vefat_eden);              lcd.line(5);              lcd.print(&quot;Vefat eden: &quot;);              lcd.print(vefat_eden.toInt());                  indx = Data_Raw_3.indexOf(&quot;&lt;span&gt;&quot;);              Data_Raw_3.remove(0,indx+6);              indx = Data_Raw_3.indexOf(&quot;&lt;&quot;);              Data_Raw_3.remove(indx,Data_Raw_3.length());                            iyilesen=Data_Raw_3;              iyilesen = _parse(iyilesen);              lcd.line(6);              lcd.print(&quot;Iyilesen: &quot;);              lcd.print(iyilesen.toInt());                                                                                       }        }        else         {          Serial.printf(&quot;[HTTP] istegi alinamadi, Hata: %s\\n&quot;, http.errorToString(httpCode).c_str());        }        http.end();                                                                       }       else       {        Serial.printf(&quot;[HTTP} baglanılamıyor.\\n&quot;);      }    delay(5000);    while (WiFi.status() != WL_CONNECTED)                                            {         WiFi.disconnect();                                                                delay(1000);                                                                     WiFi.begin(ssid, password);                                                      Serial.println(&quot;Wifi agına tekrar baglaniyor.&quot;);               delay(10000);                                                                   }} String prs(String value){  for(int i=0; value.length();i++)  {    Serial.println(value.substring(i,i));  }}Fritzing ŞemasıSonuç",
            "content_html": "<p><img src=\"https://drive.google.com/uc?id=1ws7zkULNMkbVfTmeUVNx6AGVo1Wct5z7\" alt=\"Tittle-Photo\" /></p><p>Bu projede 1.6” Nokia 5110 ekranı ile nodeMCU kartını kullanarak anlık ülkemizdeki corona virüs istatiklerini gösterebileceğimiz bir monitör yaptım. Anlık olarak ekran üzerinde; toplam vaka sayısı, vefat eden kişi ve iyileşen hasta sayılarını vermektedir.</p><blockquote>  <p>Projeye başlamadan önce proje içerisinde veri transferi yapmamıza yarayacak ThingSpeak sitesinden biraz bahsetmek istiyorum. <a href=\"https://thingspeak.com/\">ThingSpeak</a> ücretsiz olarak hem arduino sensörleri ile okuduğunuz değerleri yazmaya, hem de yazdığınız değerleri telefonunuzda, bilgisayarınızda veya diğer akıllı cihazlarınızda anlık görebilmenize ve okuyabilmenize imkan tanıyan bir platform. API için kanal oluşturuyorsunuz ve sadece sizin bildiğiniz şifreler ile (API key) verilerinizi grafik üzerinde takip edebiliyorsunuz.Sadece veri gönderip okumaktan farklı olarak internetteki bir veriyi API ile IOT cihazlarınıza gönderebilirsiniz. Bizim bu projede yaptığımız da tam olarak bu.</p></blockquote><h3 id=\"malzeme-listesi\">Malzeme Listesi</h3><ul>  <li><span style=\"font-size:18px\">NodeMCU(ESP8266) Kartı</span></li>  <li><span style=\"font-size:18px\">Nokia 5110 ekranı</span></li></ul><h3 id=\"covid-19-verilerini-çekme\">COVID-19 Verilerini Çekme</h3><blockquote>  <p><strong>Worldometer sitesinden COVID-19 verisini çekeceğimiz ülkenin sayfasına gitmemiz gerekiyor. Bunun için <a href=\"https://www.worldometers.info/coronavirus/\">Worldometer</a> sitesine gidiyoruz.</strong></p></blockquote><p><img src=\"https://drive.google.com/uc?id=1guj430F_Nb7h785DPZEanxTvHflQ-eBT\" alt=\"Worldometer\" /></p><blockquote>  <p><strong>Siteye girdikten sonra sitenin alt kısmında bulunan tabloda verisini çekmek istediğimiz ülkenin linkine tıklyoruz.</strong></p></blockquote><p><br /></p><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=19K-hrviACswPIWBRbzcdphvZafJpXjUm\" alt=\"Worldometer\" /></p><blockquote>  <p><strong>Karşımıza gelen sayfada klavyenizden “F12” tuşuna basarak veya mouse’nuzla sağ tık atıp inceleye basarak sayfa kaynağının görüntülendiği ekranı açıyoruz.</strong></p></blockquote><p><br /></p><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=1Pmy21HS2mZHAZDgyAM_6LGFBoe1u6UJS\" alt=\"Worldometer\" /></p><blockquote>  <p><strong>Bu kısımda mavi alan içerisinde gösterilen kısma geliyoruz ve mouse ile sağ tık atıp /Copy/Copy XPath seçeneğine tıklıyoruz. Bu kopyalanan veriyi ThinkSpeak ekranında kullanacağız.</strong></p></blockquote><p><br /></p><h3 id=\"thingspeak-ayarları\">ThingSpeak Ayarları</h3><p><img src=\"https://drive.google.com/uc?id=1G85QbMpMbS_mFTT3uoJ336xzuQDUBquY\" alt=\"Worldometer\" class=\"img-responsive\" /></p><blockquote>  <p><strong>Projenin başında bahsettiğim gibi projemizde veri transferini sağlayacak olan ThingSpeak sitesine kayıt olmamız gerekiyor. Eğer kayıt olduysanız site anasayfasında üstte bulunan Apps butonuna gelin ve altta çıkan seçeneklerden ThingHTTP’ye tıklayın.</strong></p></blockquote><p><br /></p><p><img src=\"https://drive.google.com/uc?id=1t6lvGaHPbXU-ZXO5avTyAZ1dD1Eb3-et\" alt=\"Worldometer\" class=\"img-responsive\" /></p><blockquote>  <p><strong>ThingHTTP’ye tıkladıktan sonra karşımıza çıkan sayfada NewThingHTTP butonuna basıyoruz.</strong></p></blockquote><p><br /></p><p><img src=\"https://drive.google.com/uc?id=19k5UP3FxbW2rNiuGdEFC5_oK6VMDhKfx\" alt=\"Worldometer\" class=\"img-responsive\" /></p><blockquote>  <p><strong>Karşımıza gelen ekranda Name yazan kısma istediğinizi yazabilirsiniz. Ben Türkiye’deki COVID-19 verilerini çekmek istediğim için “Turkey” yazdım. Parse String kısmına kopyaladığımız XPath’i yapıştırıyoruz ve “Save ThingHTTP” butonuna basıyoruz.</strong></p></blockquote><p><br /></p><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=1y4hhlLZ0EvMTGCDuykayWZeYk9kji3ZU\" alt=\"image-title-here\" /></p><blockquote>  <p><strong>Kırmızı dikdörtgen ile işaretlenmiş alan içerisindeki API’yı kopyalıyoruz.</strong></p></blockquote><p><br /></p><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=1LKcq7rvfNLO-5H7JSJg6qAzP8AE6msZ4\" alt=\"image-title-here\" /></p><blockquote>  <p><strong>Kopyaladığımız API’yı yukarıdaki fotoğraftaki kırmızı alan içerisindeki api_key kısmına yapıştırıyoruz. Bu arada ağ adı ve ağ parolası yazan kısma bulunduğunuz ortamdaki wifi ağının adını ve parolasını girmeyi unutmayınız.</strong></p></blockquote><h3 id=\"proje-kaynak-kodu\">Proje Kaynak Kodu</h3><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\">#include &lt;graphicsLCD.h&gt;#include &lt;ESP8266WiFi.h&gt;                                                  #include &lt;ESP8266HTTPClient.h&gt;                                                                       const char* ssid = &quot;AğAdı&quot;;                                        const char* password =  &quot;AğParolası&quot;; const char* host = &quot;api.thingspeak.com&quot;;                                     const int httpPortRead = 80;                                           #define lcd_RST_pin D8#define lcd_CS_pin D7#define lcd_DIN_pin D5#define lcd_CLK_pin D4graphicsLCD lcd(lcd_RST_pin,lcd_CS_pin,lcd_DIN_pin,lcd_CLK_pin);const char* url1 = &quot;/apps/thinghttp/send_request?api_key=Api key yapıştıracağınız kısım&quot;; String toplam_vaka,vefat_eden,iyilesen,Data_Raw,Data_Raw_1,Data_Raw_2,Data_Raw_3;  int indx;WiFiClient client;                                                        HTTPClient http; String _parse(String value){  String kelime ;  for(int i=0; i &lt; value.length();i++)  {    if(value.substring(i,i+1) != &quot;,&quot;)      kelime += value.substring(i,i+1);    }  return kelime;}void setup() {  Serial.begin(9600);  lcd.begin();    lcd.clear();                                                           WiFi.disconnect();                                                  delay(1000);                                                             WiFi.begin(ssid, password);                                                 Serial.println(&quot;Wifi agina baglandı.&quot;);                                         Serial.println(WiFi.localIP());}   void loop()                                                                      {    if( http.begin(host,httpPortRead,url1))                                                    {        int httpCode = http.GET();                                                                          if (httpCode &gt; 0)                                                                      {          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY)             {                 lcd.line(1);              lcd.column(36);              lcd.print(&quot;Turkey&quot;);              Data_Raw = http.getString();                              Data_Raw_1 = Data_Raw;                                                indx = Data_Raw_1.indexOf(&quot;&gt;&quot;);                                                                    Data_Raw_1.remove(0,indx+1);                                      indx = Data_Raw_1.indexOf(&quot;&lt;&quot;);                                                                   Data_Raw_1.remove(indx,Data_Raw_1.length());                                      toplam_vaka=Data_Raw_1;              toplam_vaka = _parse(toplam_vaka);               lcd.line(4);              lcd.print(&quot;Toplam vaka: &quot;);              lcd.print(toplam_vaka.toInt());               lcd.print(&quot;k&quot;);              Data_Raw_2=Data_Raw;              indx = Data_Raw_2.indexOf(&quot;&lt;span&gt;&quot;);              Data_Raw_2.remove(0,indx+6);              Data_Raw_3=Data_Raw_2;              indx = Data_Raw_2.indexOf(&quot;&lt;/span&gt;&quot;);              Data_Raw_2.remove(indx,Data_Raw_2.length());              vefat_eden=Data_Raw_2;              vefat_eden = _parse(vefat_eden);              lcd.line(5);              lcd.print(&quot;Vefat eden: &quot;);              lcd.print(vefat_eden.toInt());                  indx = Data_Raw_3.indexOf(&quot;&lt;span&gt;&quot;);              Data_Raw_3.remove(0,indx+6);              indx = Data_Raw_3.indexOf(&quot;&lt;&quot;);              Data_Raw_3.remove(indx,Data_Raw_3.length());                            iyilesen=Data_Raw_3;              iyilesen = _parse(iyilesen);              lcd.line(6);              lcd.print(&quot;Iyilesen: &quot;);              lcd.print(iyilesen.toInt());                                                                                       }        }        else         {          Serial.printf(&quot;[HTTP] istegi alinamadi, Hata: %s\\n&quot;, http.errorToString(httpCode).c_str());        }        http.end();                                                                       }       else       {        Serial.printf(&quot;[HTTP} baglanılamıyor.\\n&quot;);      }    delay(5000);    while (WiFi.status() != WL_CONNECTED)                                            {         WiFi.disconnect();                                                                delay(1000);                                                                     WiFi.begin(ssid, password);                                                      Serial.println(&quot;Wifi agına tekrar baglaniyor.&quot;);               delay(10000);                                                                   }} String prs(String value){  for(int i=0; value.length();i++)  {    Serial.println(value.substring(i,i));  }}</code></pre></figure><h3 id=\"fritzing-şeması\">Fritzing Şeması</h3><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=1r8PjmfXzo9z4W8N3CiNr9mqrVJJ05_qO\" alt=\"image-title-here\" /></p><h3 id=\"sonuç\">Sonuç</h3><p class=\"img-responsive\"><img src=\"https://drive.google.com/uc?id=1pOMffX0ygMv5w6Fm2dVfhKiE38HyHZ32\" alt=\"image-title-here\" /></p>",
            "url": "http://localhost:4000/2020/05/19/nodemcu-esp8266-ve-nokia-5110-i%CC%87le-covid19-m%C3%B6nit%C3%B6r%C3%BC-yap%C4%B1m%C4%B1",
            
            
            
            "tags": ["NodeMCU","Esp8266","COVID-19","Corona","Worldometer","ThingSpeak","Nokia5110"],
            
            "date_published": "2020-05-19T23:15:02+03:00",
            "date_modified": "2020-05-19T23:15:02+03:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/05/13/blog-a%C3%A7%C4%B1ld%C4%B1",
            "title": "Blog Açıldı",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2020/05/13/blog-a%C3%A7%C4%B1ld%C4%B1",
            
            
            
            
            
            "date_published": "2020-05-13T23:15:02+03:00",
            "date_modified": "2020-05-13T23:15:02+03:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}